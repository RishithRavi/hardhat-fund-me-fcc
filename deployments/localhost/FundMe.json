{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAggregatorV3Interface",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47dbe936fec9924f821bf34930c9dc5f703614882f9553db56ef30c169c865f0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1053619",
    "logsBloom": "0x
    "blockHash": "0xc28da7f66b442fc2279df642eae8f2b4f323cd8498e0df0decd70f7482b7a2b4",
    "transactionHash": "0x47dbe936fec9924f821bf34930c9dc5f703614882f9553db56ef30c169c865f0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1053619",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "47cb0b89d1006b7c9ffab163f2a950ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorV3Interface\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rishith Ravi\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/// @title FundMe\\r\\n/// @author Rishith Ravi\\r\\n/// @notice Sample funding contract\\r\\n/// @dev This implements price feeds as our library\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    address[] private s_funders;\\r\\n\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    address private /* immutable */ i_owner;\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n    constructor(address s_priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n        s_funders.push(msg.sender);\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function withdraw() payable onlyOwner public {\\r\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // // transfer\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        // // send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() payable onlyOwner public {\\r\\n        address[] memory funders = s_funders;\\r\\n        // mappings cant be in memory\\r\\n        for(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool callSuccess, ) = payable(i_owner).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess);\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address){\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address){\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getAggregatorV3Interface() public view returns (AggregatorV3Interface){\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n    \\r\\n    // Explainer from: https://solidity-by-example.org/fallback/\\r\\n    // Ether is sent to contract\\r\\n    //      is msg.data empty?\\r\\n    //          /   \\\\ \\r\\n    //         yes  no\\r\\n    //         /     \\\\\\r\\n    //    receive()?  fallback() \\r\\n    //     /   \\\\ \\r\\n    //   yes   no\\r\\n    //  /        \\\\\\r\\n    //receive()  fallback()\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n// Concepts we didn't cover yet (will cover in later sections)\\r\\n// 1. Enum\\r\\n// 2. Events\\r\\n// 3. Try / Catch\\r\\n// 4. Function Selector\\r\\n// 5. abi.encode / decode\\r\\n// 6. Hash with keccak256\\r\\n// 7. Yul / Assembly\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0xa8d3faef2e52f75b1549c1001ac13c42dccecfb750900652db9b5410206f8a53\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        // );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3580850a5c9eee7f15ed4167b6152e49bd287e01917e0836d9dfee59db3fd52b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012b2380380620012b283398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b611146806200016c6000396000f3fe60806040526004361061007b5760003560e01c80638d92ab001161004e5780638d92ab001461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a7e565b610199565b6040516100b49190610ac4565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc610423565b6040516100e99190610ac4565b60405180910390f35b3480156100fe57600080fd5b50610107610430565b6040516101149190610aee565b60405180910390f35b34801561012957600080fd5b5061013261045a565b60405161013f9190610b68565b60405180910390f35b610150610484565b005b61015a6105be565b005b34801561016857600080fd5b50610183600480360381019061017e9190610baf565b610850565b6040516101909190610aee565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610268576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103135760006001828154811061028e5761028d610bdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030b90610c3a565b91505061026b565b50600067ffffffffffffffff81111561032f5761032e610c83565b5b60405190808252806020026020018201604052801561035d5781602001602082028036833780820191505090505b5060019080519060200190610373929190610974565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039a90610ce3565b60006040518083038185875af1925050503d80600081146103d7576040519150601f19603f3d011682016040523d82523d6000602084013e6103dc565b606091505b5050905080610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041790610d55565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104c3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089890919063ffffffff16565b1015610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90610dc1565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105529190610de1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067f575b5050505050905060005b81518110156107535760008282815181106106f1576106f0610bdc565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610c3a565b9150506106d3565b50600067ffffffffffffffff81111561076f5761076e610c83565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600190805190602001906107b3929190610974565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516107fc90610ce3565b60006040518083038185875af1925050503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b505090508061084c57600080fd5b5050565b60006001828154811061086657610865610bdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a4836108d4565b90506000670de0b6b3a764000085836108bd9190610e37565b6108c79190610ec0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109559190610f7e565b5050509150506402540be4008161096c9190610ff9565b915050919050565b8280548282559060005260206000209081019282156109ed579160200282015b828111156109ec5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610994565b5b5090506109fa91906109fe565b5090565b5b80821115610a175760008160009055506001016109ff565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4b82610a20565b9050919050565b610a5b81610a40565b8114610a6657600080fd5b50565b600081359050610a7881610a52565b92915050565b600060208284031215610a9457610a93610a1b565b5b6000610aa284828501610a69565b91505092915050565b6000819050919050565b610abe81610aab565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b610ae881610a40565b82525050565b6000602082019050610b036000830184610adf565b92915050565b6000819050919050565b6000610b2e610b29610b2484610a20565b610b09565b610a20565b9050919050565b6000610b4082610b13565b9050919050565b6000610b5282610b35565b9050919050565b610b6281610b47565b82525050565b6000602082019050610b7d6000830184610b59565b92915050565b610b8c81610aab565b8114610b9757600080fd5b50565b600081359050610ba981610b83565b92915050565b600060208284031215610bc557610bc4610a1b565b5b6000610bd384828501610b9a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c4582610aab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c7857610c77610c0b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ccd600083610cb2565b9150610cd882610cbd565b600082019050919050565b6000610cee82610cc0565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d3f600b83610cf8565b9150610d4a82610d09565b602082019050919050565b60006020820190508181036000830152610d6e81610d32565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dab601b83610cf8565b9150610db682610d75565b602082019050919050565b60006020820190508181036000830152610dda81610d9e565b9050919050565b6000610dec82610aab565b9150610df783610aab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2c57610e2b610c0b565b5b828201905092915050565b6000610e4282610aab565b9150610e4d83610aab565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8657610e85610c0b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ecb82610aab565b9150610ed683610aab565b925082610ee657610ee5610e91565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f1081610ef1565b8114610f1b57600080fd5b50565b600081519050610f2d81610f07565b92915050565b6000819050919050565b610f4681610f33565b8114610f5157600080fd5b50565b600081519050610f6381610f3d565b92915050565b600081519050610f7881610b83565b92915050565b600080600080600060a08688031215610f9a57610f99610a1b565b5b6000610fa888828901610f1e565b9550506020610fb988828901610f54565b9450506040610fca88828901610f69565b9350506060610fdb88828901610f69565b9250506080610fec88828901610f1e565b9150509295509295909350565b600061100482610f33565b915061100f83610f33565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104e5761104d610c0b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108b5761108a610c0b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c8576110c7610c0b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561110557611104610c0b565b5b82820290509291505056fea2646970667358221220e89f542f766108e67e97bb37c653552b079b5a4e22c5a22afbdc13357925551a64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80638d92ab001161004e5780638d92ab001461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a7e565b610199565b6040516100b49190610ac4565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc610423565b6040516100e99190610ac4565b60405180910390f35b3480156100fe57600080fd5b50610107610430565b6040516101149190610aee565b60405180910390f35b34801561012957600080fd5b5061013261045a565b60405161013f9190610b68565b60405180910390f35b610150610484565b005b61015a6105be565b005b34801561016857600080fd5b50610183600480360381019061017e9190610baf565b610850565b6040516101909190610aee565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610268576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103135760006001828154811061028e5761028d610bdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030b90610c3a565b91505061026b565b50600067ffffffffffffffff81111561032f5761032e610c83565b5b60405190808252806020026020018201604052801561035d5781602001602082028036833780820191505090505b5060019080519060200190610373929190610974565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039a90610ce3565b60006040518083038185875af1925050503d80600081146103d7576040519150601f19603f3d011682016040523d82523d6000602084013e6103dc565b606091505b5050905080610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041790610d55565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104c3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089890919063ffffffff16565b1015610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90610dc1565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105529190610de1565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067f575b5050505050905060005b81518110156107535760008282815181106106f1576106f0610bdc565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610c3a565b9150506106d3565b50600067ffffffffffffffff81111561076f5761076e610c83565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600190805190602001906107b3929190610974565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516107fc90610ce3565b60006040518083038185875af1925050503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b505090508061084c57600080fd5b5050565b60006001828154811061086657610865610bdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a4836108d4565b90506000670de0b6b3a764000085836108bd9190610e37565b6108c79190610ec0565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109559190610f7e565b5050509150506402540be4008161096c9190610ff9565b915050919050565b8280548282559060005260206000209081019282156109ed579160200282015b828111156109ec5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610994565b5b5090506109fa91906109fe565b5090565b5b80821115610a175760008160009055506001016109ff565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4b82610a20565b9050919050565b610a5b81610a40565b8114610a6657600080fd5b50565b600081359050610a7881610a52565b92915050565b600060208284031215610a9457610a93610a1b565b5b6000610aa284828501610a69565b91505092915050565b6000819050919050565b610abe81610aab565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b610ae881610a40565b82525050565b6000602082019050610b036000830184610adf565b92915050565b6000819050919050565b6000610b2e610b29610b2484610a20565b610b09565b610a20565b9050919050565b6000610b4082610b13565b9050919050565b6000610b5282610b35565b9050919050565b610b6281610b47565b82525050565b6000602082019050610b7d6000830184610b59565b92915050565b610b8c81610aab565b8114610b9757600080fd5b50565b600081359050610ba981610b83565b92915050565b600060208284031215610bc557610bc4610a1b565b5b6000610bd384828501610b9a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c4582610aab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c7857610c77610c0b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ccd600083610cb2565b9150610cd882610cbd565b600082019050919050565b6000610cee82610cc0565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d3f600b83610cf8565b9150610d4a82610d09565b602082019050919050565b60006020820190508181036000830152610d6e81610d32565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dab601b83610cf8565b9150610db682610d75565b602082019050919050565b60006020820190508181036000830152610dda81610d9e565b9050919050565b6000610dec82610aab565b9150610df783610aab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2c57610e2b610c0b565b5b828201905092915050565b6000610e4282610aab565b9150610e4d83610aab565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8657610e85610c0b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ecb82610aab565b9150610ed683610aab565b925082610ee657610ee5610e91565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f1081610ef1565b8114610f1b57600080fd5b50565b600081519050610f2d81610f07565b92915050565b6000819050919050565b610f4681610f33565b8114610f5157600080fd5b50565b600081519050610f6381610f3d565b92915050565b600081519050610f7881610b83565b92915050565b600080600080600060a08688031215610f9a57610f99610a1b565b5b6000610fa888828901610f1e565b9550506020610fb988828901610f54565b9450506040610fca88828901610f69565b9350506060610fdb88828901610f69565b9250506080610fec88828901610f1e565b9150509295509295909350565b600061100482610f33565b915061100f83610f33565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104e5761104d610c0b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108b5761108a610c0b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c8576110c7610c0b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561110557611104610c0b565b5b82820290509291505056fea2646970667358221220e89f542f766108e67e97bb37c653552b079b5a4e22c5a22afbdc13357925551a64736f6c63430008080033",
  "devdoc": {
    "author": "Rishith Ravi",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "FundMe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}